// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package smgcontainer

import (
	"github.com/hetacode/go-bus"
	"github.com/hetacode/go-eh"
	"github.com/hetacode/mechelon/arch"
	"github.com/hetacode/mechelon/events"
	"github.com/hetacode/mechelon/services/services-mgmt/eventstore"
	"github.com/hetacode/mechelon/services/services-mgmt/types"
	"github.com/hetacode/mechelon/services/services-mgmt/workers"
	"os"
)

// Injectors from container.go:

func NewContainer() *Container {
	eventsMapper := events.NewEventsMapper()
	eventStore := initEventStoreProvider(eventsMapper)
	commandsConsumerBus := initCommandsConsumerBusProvider(eventsMapper)
	eventsProducerBus := initEventsProducerBusProvider(eventsMapper)
	serviceStateRepository := initServiceStateRepositoryProvider(eventStore)
	workersManager := initWorkersManagerProvider(serviceStateRepository)
	container := &Container{
		EventStore:             eventStore,
		CommandsConsumerBus:    commandsConsumerBus,
		EventsProducerBus:      eventsProducerBus,
		ServiceStateRepository: serviceStateRepository,
		WorkersManager:         workersManager,
	}
	return container
}

// container.go:

type Container struct {
	EventStore             arch.EventStore
	CommandsConsumerBus    smgtypes.CommandsConsumerBus
	EventsProducerBus      smgtypes.EventsProducerBus
	ServiceStateRepository *smgeventstore.ServiceStateRepository
	WorkersManager         *smgworkers.WorkersManager
}

func initWorkersManagerProvider(repository *smgeventstore.ServiceStateRepository) *smgworkers.WorkersManager {
	mgr := smgworkers.NewWorkersManager(repository)
	return mgr
}

func initEventsProducerBusProvider(em *goeh.EventsMapper) smgtypes.EventsProducerBus {
	kind := gobus.RabbitMQServiceBusOptionsFanOutKind
	bus := gobus.NewRabbitMQServiceBus(em, &gobus.RabbitMQServiceBusOptions{
		Kind:      &kind,
		Exchanage: os.Getenv("SVC_SERVICES_MGMT_SB_EVENTS_EXCHANGE"),
		Server:    os.Getenv("RABBITMQ_SERVER"),
	})

	return bus
}

func initServiceStateRepositoryProvider(es arch.EventStore) *smgeventstore.ServiceStateRepository {
	r := &smgeventstore.ServiceStateRepository{
		EventStore: es,
	}
	return r
}

func initCommandsConsumerBusProvider(em *goeh.EventsMapper) smgtypes.CommandsConsumerBus {
	kind := gobus.RabbitMQServiceBusOptionsFanOutKind
	bus := gobus.NewRabbitMQServiceBus(em, &gobus.RabbitMQServiceBusOptions{
		Kind:      &kind,
		Exchanage: os.Getenv("SVC_SERVICES_MGMT_SB_COMMANDS_EXCHANGE"),
		Queue:     os.Getenv("SVC_SERVICES_MGMT_SB_COMMANDS_QUEUE"),
		Server:    os.Getenv("RABBITMQ_SERVER"),
	})

	return bus
}

func initEventStoreProvider(em *goeh.EventsMapper) arch.EventStore {
	es := smgeventstore.NewServiceEventStore(em)
	return es
}
