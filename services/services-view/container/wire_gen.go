// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package svvcontainer

import (
	"github.com/hetacode/go-bus"
	"github.com/hetacode/go-eh"
	"github.com/hetacode/mechelon/events"
	"os"
)

// Injectors from container.go:

func NewContainer() *Container {
	eventsMapper := events.NewEventsMapper()
	serviceBus := initEventsConsumerBusProvider(eventsMapper)
	container := &Container{
		EventsConsumerBus: serviceBus,
	}
	return container
}

// container.go:

// Container struct keep of all dependencies
type Container struct {
	EventsConsumerBus gobus.ServiceBus
}

func initEventsConsumerBusProvider(em *goeh.EventsMapper) gobus.ServiceBus {
	kind := gobus.RabbitMQServiceBusOptionsFanOutKind
	bus := gobus.NewRabbitMQServiceBus(em, &gobus.RabbitMQServiceBusOptions{
		Kind:      &kind,
		Exchanage: os.Getenv("SVC_SERVICES_MGMT_SB_EVENTS_EXCHANGE"),
		Queue:     os.Getenv("SVC_SERVICES_VIEW_SB_EVENTS_QUEUE"),
		Server:    os.Getenv("RABBITMQ_SERVER"),
	})

	return bus
}
